use crate::ast::*;

grammar;

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  _
}

pub CompUnit: CompUnit = <func_defs: (FuncDef)+> => CompUnit { <> };

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Exp: Exp = <exp: LOrExp> => Exp { <> };

PrimaryExp: PrimaryExp = {
  "(" <Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
  LVal => PrimaryExp::LVal(<>),
  Number => PrimaryExp::Number(<>),
}

UnaryExp: UnaryExp = {
  PrimaryExp => UnaryExp::Primary(<>),
  <id: Ident> "(" <params: (FuncRParams)?> ")" => UnaryExp::Func(id, params),
  <op: UnaryOp> <exp: UnaryExp> => UnaryExp::Unary(op, Box::new(exp)),
}

MulExp: MulExp = {
  UnaryExp => MulExp::Unary(<>),
  <lhs: MulExp> <op: MulOp> <rhs: UnaryExp> => MulExp::MulUnary(Box::new(lhs), op, rhs),
}

AddExp: AddExp = {
  MulExp => AddExp::Mul(<>),
  <lhs: AddExp> <op: AddOp> <rhs: MulExp> => AddExp::AddMul(Box::new(lhs), op, rhs),
}

RelExp: RelExp = {
  AddExp => RelExp::Add(<>),
  <lhs: RelExp> <op: RelOp> <rhs: AddExp> => RelExp::RelAdd(Box::new(lhs), op, rhs),
}

EqExp: EqExp = {
  RelExp => EqExp::Rel(<>),
  <lhs: EqExp> <op: EqOp> <rhs: RelExp> => EqExp::EqRel(Box::new(lhs), op, rhs),
}

LAndExp: LAndExp = {
  EqExp => LAndExp::Eq(<>),
  <lhs: LAndExp> "&&" <rhs: EqExp> => LAndExp::LAndEq(Box::new(lhs), rhs),
}

LOrExp: LOrExp = {
  LAndExp => LOrExp::LAnd(<>),
  <lhs: LOrExp> "||" <rhs: LAndExp> => LOrExp::LOrLAnd(Box::new(lhs), rhs),
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Plus,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
}

MulOp: MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
}

AddOp: AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub,
}

RelOp: RelOp = {
  "<" => RelOp::Lt,
  ">" => RelOp::Gt,
  "<=" => RelOp::Le,
  ">=" => RelOp::Ge,
}

EqOp: EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::Ne,
}

Decl: Decl = <decl_type: BType> <def: Def> <mut defs: ("," <Def>)*> ";" => {
  defs.insert(0, def);
  Decl { decl_type, defs }
};

Def: Def = <id: Ident> <val: ("=" <InitVal>)?> => Def { <> };

InitVal: InitVal = <exp: Exp> => InitVal { <> };

LVal: LVal = <id: Ident> => LVal { <> };

BType: BType = "int" => BType::Int;


Block: Block = "{" <items: (<BlockItem>)*> "}" => Block { <> };

BlockItem: BlockItem = {
  Decl => BlockItem::Decl(<>),
  Stmt => BlockItem::Stmt(<>),
}

Stmt: Stmt = {
  <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(Assign{ <> }),
  <block: Block> => Stmt::Sblock(Sblock{ <> }),
  "if" "(" <cond: Exp> ")" <then_block: Block> <else_block: ("else" <Block>)?> => Stmt::If(If{ <> }),
  "while" "(" <cond:Exp> ")" <block: Block> => Stmt::While(While{ <> }),
  "return" <exp: Exp> ";" => Stmt::Return(Return{ <> }),
}

FuncDef: FuncDef = <func_type: FuncType> <ident: Ident> "(" <params: (FuncFParams)?> ")" <block: Block> => {
  FuncDef { <> }
};

FuncType: FuncType = "int" => FuncType::Int;

FuncFParams: FuncFParams = <param: FuncFParam> <mut params: ("," <FuncFParam>)*> => {
  params.insert(0, param);
  FuncFParams { params }
};

FuncFParam: FuncFParam = <param_type: BType> <id: Ident> => FuncFParam { <> };

FuncRParams: FuncRParams = <param: Exp> <mut params: ("," <Exp>)*> => {
  params.insert(0, param);
  FuncRParams { params }
};
