Exp: Exp = <exp: LOrExp> => Exp { <> };

PrimaryExp: PrimaryExp = {
  "(" <Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
  LVal => PrimaryExp::LVal(<>),
  Number => PrimaryExp::Number(<>),
}

UnaryExp: UnaryExp = {
  PrimaryExp => UnaryExp::Primary(<>),
  <id: Ident> "(" <params: (FuncRParams)?> ")" => UnaryExp::Func(id, params),
  <op: UnaryOp> <exp: UnaryExp> => UnaryExp::Unary(op, Box::new(exp)),
}

MulExp: MulExp = {
  UnaryExp => MulExp::Unary(<>),
  <lhs: MulExp> <op: MulOp> <rhs: UnaryExp> => MulExp::MulUnary(Box::new(lhs), op, rhs),
}

AddExp: AddExp = {
  MulExp => AddExp::Mul(<>),
  <lhs: AddExp> <op: AddOp> <rhs: MulExp> => AddExp::AddMul(Box::new(lhs), op, rhs),
}

RelExp: RelExp = {
  AddExp => RelExp::Add(<>),
  <lhs: RelExp> <op: RelOp> <rhs: AddExp> => RelExp::RelAdd(Box::new(lhs), op, rhs),
}

EqExp: EqExp = {
  RelExp => EqExp::Rel(<>),
  <lhs: EqExp> <op: EqOp> <rhs: RelExp> => EqExp::EqRel(Box::new(lhs), op, rhs),
}

LAndExp: LAndExp = {
  EqExp => LAndExp::Eq(<>),
  <lhs: LAndExp> "&&" <rhs: EqExp> => LAndExp::LAndEq(Box::new(lhs), rhs),
}

LOrExp: LOrExp = {
  LAndExp => LOrExp::LAnd(<>),
  <lhs: LOrExp> "||" <rhs: LAndExp> => LOrExp::LOrLAnd(Box::new(lhs), rhs),
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Plus,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
}

MulOp: MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
}

AddOp: AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub,
}

RelOp: RelOp = {
  "<" => RelOp::Lt,
  ">" => RelOp::Gt,
  "<=" => RelOp::Le,
  ">=" => RelOp::Ge,
}

EqOp: EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::Ne,
}
