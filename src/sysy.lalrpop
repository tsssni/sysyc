use crate::ast::*;

grammar;

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <Exp> ";" => Stmt{ exp: Box::new(<>) };

Exp: Exp = <exp: RelExp> => Exp { <> };

PrimaryExp: PrimaryExp = {
  "(" <Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
  Number => PrimaryExp::Number(<>),
}

UnaryExp: UnaryExp = {
  PrimaryExp => UnaryExp::Primary(<>),
  <op: UnaryOp> <exp: UnaryExp> => UnaryExp::Unary(op, Box::new(exp)),
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Plus,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
}

MulExp: MulExp = {
  UnaryExp => MulExp::Unary(<>),
  <lhs: MulExp> <op: MulOp> <rhs: UnaryExp> => MulExp::MulUnary(Box::new(lhs), op, rhs),
}

MulOp: MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
}

AddExp: AddExp = {
  MulExp => AddExp::Mul(<>),
  <lhs: AddExp> <op: AddOp> <rhs: MulExp> => AddExp::AddMul(Box::new(lhs), op, rhs),
}

AddOp: AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub,
}

RelExp: RelExp = {
  AddExp => RelExp::Add(<>),
  <lhs: RelExp> <op: RelOp> <rhs: AddExp> => RelExp::RelAdd(Box::new(lhs), op, rhs),
}

RelOp: RelOp = {
  "<" => RelOp::Lt,
  ">" => RelOp::Gt,
  "<=" => RelOp::Le,
  ">=" => RelOp::Ge,
}

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
